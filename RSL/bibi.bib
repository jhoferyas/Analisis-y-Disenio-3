@article{h7,
abstract = {Context: Many researchers have argued that providing interoperability support only considering the format and meaning (i.e. syntax and semantic) of data exchange is not enough to achieve complete, effective and meaningful collaboration. Pragmatic interoperability has been highlighted as a key requirement to enhance collaboration. However, fulfilling this requirement is not a trivial task and there is a lack of works discussing solutions to achieve this level of interoperability. Objectives: The aim of this study is to present a systematic review and mapping of the literature in order to identify, analyse and classify the published solutions to achieve pragmatic interoperability. Method: To conduct a systematic review and mapping in accordance with the guidelines proposed in the evidence-based software engineering literature. Results: Our study identified 13 papers reporting pragmatic interoperability computational solutions. The first paper in our set of selected papers was published in 2004; the main strategies used to address pragmatic interoperability issues were service discovery, composition and/or selection and ontologies. The application domain of the identified solutions was mainly e-business. In addition, most of the identified solutions were software architectures. Conclusion: Mature proposals addressing pragmatic interoperability are still rare in the literature. Although many works have discussed the importance of pragmatic interoperability, it is necessary that researchers report solutions that implement and evaluate pragmatic interoperability in order to make progress in this area.},
author = {Neiva, Fr{\^{a}}ncila Weidt and David, Jos{\'{e}} Maria N. and Braga, Regina and Campos, Fernanda},
doi = {10.1016/j.infsof.2015.12.013},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Collaboration,Collaborative systems,Groupware,Interoperability,Pragmatic interoperability},
month = {apr},
pages = {137--150},
publisher = {Elsevier},
title = {{Towards pragmatic interoperability to support collaboration: A systematic review and mapping of the literature}},
volume = {72},
year = {2016}
}
@inproceedings{Marashdih2017,
abstract = {By reviewing the literature pertaining to XSS vulnerability, it has been found that many investigations have directed their focus only on XSS vulnerability detection, but not many studies have concentrated on removing XSS vulnerability. While PHP is the most common web technologies to build web application, this literature paper describes the gap that still exists on removing XSS vulnerability in PHP web application. This paper explains the presented methods to remove XSS vulnerability and presents the tools that are used to remove vulnerability of XSS from the PHP source code. There is no specific solution that can efficiently mitigate XSS incursions. More research is required in the field of vulnerability elimination from the PHP web application source code before deployment.},
author = {Marashdih, Abdalla Wasef and Zaaba, Zarul Fitri},
booktitle = {Procedia Computer Science},
doi = {10.1016/j.procs.2017.12.201},
issn = {18770509},
keywords = {Cross Site Scripting,Security Vulnerability,Software Security,Vulnerability Removal,Web Application Security,XSS},
month = {jan},
pages = {647--655},
publisher = {Elsevier B.V.},
title = {{Cross Site Scripting: Removing Approaches in Web Application}},
volume = {124},
year = {2017}
}
@article{h5,
abstract = {A consequence of the growing number of empirical studies in software engineering is the need to adopt systematic approaches to assessing and aggregating research outcomes in order to provide a balanced and objective summary of research evidence for a particular topic. The paper reports experiences with applying one such approach, the practice of systematic literature review, to the published studies relevant to topics within the software engineering domain. The systematic literature review process is summarised, a number of reviews being undertaken by the authors and others are described and some lessons about the applicability of this practice to software engineering are extracted. The basic systematic literature review process seems appropriate to software engineering and the preparation and validation of a review protocol in advance of a review activity is especially valuable. The paper highlights areas where some adaptation of the process to accommodate the domain-specific characteristics of software engineering is needed as well as areas where improvements to current software engineering infrastructure and practices would enhance its applicability. In particular, infrastructure support provided by software engineering indexing databases is inadequate. Also, the quality of abstracts is poor; it is usually not possible to judge the relevance of a study from a review of the abstract alone. {\textcopyright} 2006 Elsevier Inc. All rights reserved.},
author = {Brereton, Pearl and Kitchenham, Barbara A. and Budgen, David and Turner, Mark and Khalil, Mohamed},
doi = {10.1016/j.jss.2006.07.009},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Empirical software engineering,Systematic literature review},
month = {apr},
number = {4},
pages = {571--583},
publisher = {Elsevier},
title = {{Lessons from applying the systematic literature review process within the software engineering domain}},
volume = {80},
year = {2007}
}
@inproceedings{h3,
abstract = {The quality of Software Requirements Specification (SRS) is crucial in order to ensure successful project completion. SRS of poor quality usually lacks of quality attributes such as completeness, accuracy and disambiguity. Boilerplate is a technique used to deal with problems in SRS. However, study on the coverage of boilerplate contribution especially in improving SRS quality is limited. This paper presents Systematic Literature Review (SLR) on problems in SRS and boilerplates. The review that covers literature from 1997 to 2015 reveals that 1) poor quality SRS is the most popular problem among the other five SRS problems discovered, 2) Boilerplate technique has been applied to cope with SRS of poor quality, where disambiguity has been found the most popular quality attribute.},
author = {Anuar, Umairah and Ahmad, Sabrina and Emran, Nurul A.},
booktitle = {2015 9th Malaysian Software Engineering Conference, MySEC 2015},
doi = {10.1109/MySEC.2015.7475203},
isbn = {9781467382267},
keywords = {SRS quality,boilerplates,software requirements specification},
month = {may},
pages = {99--105},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{A simplified systematic literature review: Improving Software Requirements Specification quality with boilerplates}},
year = {2016}
}
@inproceedings{h4,
abstract = {Nowadays, mobile devices have evolved vertiginously due to their massive adoption by users, who have several devices with different purposes. These devices contain greater capacity/functionality to manage information, with the embedded characteristics they become an important digital evidence container. In recent years, considerable research has been conducted on various types of digital electronic evidence, acquisition schemes and methods of extracting evidence from mobile devices. In this paper, a systematic mapping of the Forensics Analysis on Mobile Device is presented; this research has been conducted following the guidelines of Kitchenham's methodology. The aim of this study is to provide a background of relevant activities that are considered by investigators to handle with potentially useful digital evidence from mobile devices. A total of 36 primary studies were selected and categorized to extract information regarding the aforementioned classification. The results presented in this contribution provide a detailed study about current analysis in research forensics field by the use of mobile devices.},
author = {Camacho, Jessica and Campos, Karina and Cedillo, Priscila and Coronel, Bryan and Bermeo, Alexandra},
booktitle = {Advances in Intelligent Systems and Computing},
doi = {10.1007/978-3-030-02828-2_5},
isbn = {9783030028275},
issn = {21945357},
keywords = {Devices,Digital evidence,Forensics,Mobile},
month = {nov},
pages = {57--72},
publisher = {Springer Verlag},
title = {{Forensics Analysis on Mobile Devices:A Systematic Mapping Study}},
url = {https://link.springer.com/chapter/10.1007/978-3-030-02828-2{\_}5},
volume = {884},
year = {2019}
}
@book{L.FLOYD2006,
abstract = {The species lists presented for benthic macroalgae, invertebrate and vertebrate species presented are extracted from recent publications (from 1977 to date). The lists summarize the species composition of the intertidal and subtidal hard-bottom communities around Helgoland. Additional information is supplied for the species composition of the "Steingrund" and "Tiefe Rinne". The lists do not claim completeness, but have been intended to provide a working platform for further listings and for comparison with data published earlier. {\textcopyright} 1993 Biologische Anstalt Helgoland.},
author = {L.FLOYD, THOMAS},
file = {:home/santy/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/L.FLOYD - 2006 - Fundamentos de sistemas digitales.pdf:pdf},
isbn = {9788483227206},
pages = {1024},
title = {{Fundamentos de sistemas digitales}},
year = {2006}
}
@article{h8,
author = {Popay, Jennie and Arai, Lisa and Britten, Nicky},
doi = {10.13140/2.1.1018.4643},
file = {:home/santy/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Popay, Arai, Britten - 2006 - Guidance on the conduct of narrative synthesis in systematic reviews A product from the ESRC Methods Progr.pdf:pdf},
title = {{Guidance on the conduct of narrative synthesis in systematic reviews: A product from the ESRC Methods Programme}},
url = {https://www.researchgate.net/publication/233866356},
year = {2006}
}
@article{h12,
abstract = {Requirements engineering processes aim to acquire functions, services and constraints. These processes are important to satisfy the customer by applying correctness, completeness through consistency according to the control instructions to achieve product quality. Both functions and services face changeability issue that is hard to regulate, depending on the precise request of the customer. This research addresses the achievement of correctness, completeness, and consistency by applying an automated approach. The evaluation is established using a standard use case diagram from the UML official website. The proposed approach detects the incorrect requirement specifications to enhance Software quality. The proposed approach includes three levels; the first level is the Structured Document, the second level is the Dynamic Language, which describes the transforming of use case diagram as dynamic, and the third level is the completeness checking procedures, which is based on the implemented standard rules. The approach is supported by a programmed tool on MS excel and XML due to IBM Rational Rose and Visual Paradigm and experimented "Online Shopping" use case diagram as a case study.},
author = {Al-Kasabera, Yazan and Alzyadat, Wael and Alhroob, Aysh and {Al Showarah}, Suleyman and Thunibat, Ahmad},
issn = {23200790},
journal = {Compusoft},
keywords = {Completeness,Consistency,Correctness,Quality,Requirements specification,Use case diagram},
month = {feb},
number = {2},
pages = {3578--3585},
publisher = {National Institute of Science Communication and Information Resources (NISCAIR)},
title = {{An automated approach to validate requirements specification}},
volume = {9},
year = {2020}
}
@inproceedings{h14,
abstract = {In order to verify the correctness of functional requirements, we have been developing a verification method of the correctness of functional requirements specification using the Requirements Frame model. In this paper, we introduce a verification method of non-functional requirements specification, especially time-response requirements and usability requirements written with a natural language. We establish a verification method by extending the Requirements Frame model. We have also developed a prototype system based on the method using Java. The extended Requirements Frame model and the verification method will be illustrated with examples.},
author = {Matsumoto, Yuuma and Shirai, Sayaka and Ohnishi, Atsushi},
booktitle = {Procedia Computer Science},
doi = {10.1016/j.procs.2017.08.006},
issn = {18770509},
keywords = {Non-functional requirements,Requirements frame,Time-Response requirements,Usability requirements,Verification of non-functional requirements},
month = {jan},
pages = {157--166},
publisher = {Elsevier B.V.},
title = {{A Method for Verifying Non-Functional Requirements}},
volume = {112},
year = {2017}
}
@inproceedings{h10,
abstract = {In this paper, the need of development of the methodology of evaluating the sufficiency of information on quality in the software requirements specification (SRS) proved with the study of traffic of information flow during the SRS formation. The developed methodology provides: the evaluation of the sufficiency of information on quality in the SRS; the request for completing the SRS with the necessary information with the purpose of the increasing the sufficiency of the volume of information on quality; the priority of complementing the SRS with the necessary information (if information is insufficient). This methodology is the basis for the development of the appropriate information technology. The use of ontologies in the developed methodology provides its adaptation to the features and specifics of the subject domain, and the preservation and safety of information on quality in the software company in case of the dismissal of the specialist.},
author = {Hovorushchenko, Tetiana and Pomorova, Oksana},
booktitle = {Proceedings of 2018 IEEE 9th International Conference on Dependable Systems, Services and Technologies, DESSERT 2018},
doi = {10.1109/DESSERT.2018.8409161},
isbn = {9781538659038},
keywords = {information on quality,methodology,ontology,software quality,software requirements specification (SRS),sufficiency of information on quality in the SRS},
month = {jul},
pages = {370--374},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Methodology of evaluating the sufficiency of information on quality in the software requirements specifications}},
year = {2018}
}
@inproceedings{h15,
abstract = {Integrating IT projects is becoming an essential challenge for companies today, especially in an era of digital transformation. IT projects refer to the information management systems of computers. This hard type of projects is characterized by urgency, uniqueness and uncertainly. Based on case studies from some Moroccan companies, and by analyzing the most recurring problems that lead to the failure of this type of project especially in the requirements phase. It can be concluded that the Moroccan IT project managers have real problems in managing time to produce documentation, on the understanding of the criticality of this early phase, which decide about the success or the failure of IT projects, and also on producing the requirements specification documents (huge documents, poor quality requirements, lack of managing documentation versions, missing requirements, etc.). In the literature, there are only some good practices to manage these problems, which are beneficial in some cases but catastrophic for others. Then IT project managers can't choose the right practice to follow. Also, some problems relate to the Moroccan companies, because of their understanding of the requirements phase. Also, there some methods which encounter these problems, but are never respected by Moroccan managers. In this article, we use the observation methodology in Moroccan IT companies to identify the common and recurring problems of the requirements specification phase and document. The study was based on 4 Moroccan companies during 4 years, and was used to analyze the factors which conduct to the failure of IT projects, then categorize and structure them. Finally, we propose an innovate framework, which guarantee a certain fluidity in the project requirement specification phase, as the standard used to write requirement specification, the automated management of the document versions, then the good advices to respect during the production of this essential deliverable to improve requirement quality, versions, dependencies, documentation, and then succeed this crucial phase. This innovative framework, advice for improvement, and best practices will enable IT projects in Morocco to succeed with a simple and fluid way, while ensuring quality, delivery, respecting Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. the requirements specification phase standard.},
author = {Hassani, Rachida and {El Bouzekri El Idrissi}, Youn{\`{e}}s},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/3318236.3318262},
isbn = {9781450362450},
keywords = {Framework to manage IT documentation,IT project,IT project management,Requirement document,Requirement specification document,Requirement specification phase,Standard of IT documentation},
pages = {138--144},
publisher = {Association for Computing Machinery},
title = {{A framework to succeed the requirement specification document of IT projects in Morocco}},
volume = {Part F1482},
year = {2019}
}
@inproceedings{h16,
abstract = {In this contribution, we investigate the incompleteness problem in textual requirements specifications. Incompleteness is a typical problem that arises when stakeholders (e.g., domain experts) hold some information for generally known, and they do not mention it to the analyst. A model based on the incomplete requirements suffers from missing objects, properties, or relationships as we show in an illustrating example. Our presented methods are based on grammatical inspection, semantic networks (ConceptNet and BabelNet), and pre-configured data from on-line dictionaries. Additionally, we show how a domain model has to be used to reveal some missing parts of it. Our experiments have shown that the precision of our methods is about 60-82 {\%}.},
author = {{\v{S}}enk{\'{y}}ř, David and Kroha, Petr},
booktitle = {ICSOFT 2019 - Proceedings of the 14th International Conference on Software Technologies},
doi = {10.5220/0007978003230330},
isbn = {9789897583797},
keywords = {Domain model,Grammatical inspection,Incompleteness,Requirements specification,Text processing},
pages = {323--330},
publisher = {SciTePress},
title = {{Problem of incompleteness in textual requirements specification}},
year = {2019}
}
@inproceedings{h17,
abstract = {The paper presents an approach to organizing the detection of conflicts between requirements based on an ontological model and a system of production rules. Requirements in the form of plain text are converted to instances of OWL ontologies for analysis. There are three basic elements “subject”, “action” and “object” in the requirements. These elements become classes of the ontology. The object properties between instances of the same classes are defined in the ontology. In the system of rules it is determined that one of four types of relations can be established between a pair of the requirements: isConflict, isDuplicate, isInterconnect, isNotInterconnect. We develop the software product in the Python language for building and applying production rules system for classes and property objects of the ontology. Prot{\'{e}}g{\'{e}} 5.2 is used to work with the ontology. Also Python library PySwip and development environment SWI-Prolog 7.6.4 are used in the work. The paper also considers the issues of extracting requirements ontology instances from the automated processing results of textual requirements. The UDPipe with Russian language model is used for text processing.},
author = {Murtazina, M. Sh and Avdeenko, T. V.},
booktitle = {CEUR Workshop Proceedings},
doi = {10.18287/1613-0073-2019-2416-63-73},
issn = {16130073},
pages = {63--73},
publisher = {CEUR-WS},
title = {{The detection of conflicts in the requirements specification based on an ontological model and a production rule system}},
volume = {2416},
year = {2019}
}
@inproceedings{Boschen2016,
abstract = {In this paper, we discuss the problem of transforming a natural language requirements specification into a formal specification. We present several methods to support the process and implemented them in a commercial tool, the Requirements Quality Suite. We achieve this by enriching the requirement text with additional structure (using a knowledge base) and asking the requirement engineer to formulate the requirements in Boilerplates. The additional structure is used to analyze the requirements automatically or semi-automatically leading finally to a formal specification. The formal specification then enables verification activities, such as testing or formal analysis. We discuss our methods by examples from an industrial case study and report on our experiences.},
author = {B{\"{o}}schen, Martin and Bogusch, Ralf and Fraga, Anabel and Rudat, Christian},
booktitle = {CEUR Workshop Proceedings},
issn = {16130073},
keywords = {Boilerplates,Formalization,Requirement patterns,Requirements,Testing},
publisher = {CEUR-WS},
title = {{Bridging the gap between natural language requirements and formal specifications}},
volume = {1564},
year = {2016}
}
@article{Ribeiro2020,
abstract = {Context and motivation: All the research in methods and tools for avoiding, detecting, and removing ambiguities in requirements specifications assumes that doing so is necessary and that the methods and tools for doing so are worth the effort to use them. Each of two attempts by de Bruijn et al. and Philippo et al. to test these assumptions empirically with a case study examined a random sampling of the ambiguities in the requirements specification for already constructed software. Each study concluded that ambiguities in the examined requirements specification did not result in any serious defects in the downstream development and seem to have been resolved through the normal multiple inspections and discussions that characterize a serious requirements engineering process. Question/problem: However, because each study examined only a small random sampling of the many ambiguities in its specification, it may have missed the rare ambiguity that causes a serious defect in the constructed software. Moreover, as a case study, its results cannot be generalized. So the unanswered questions are: (1) “How prevalent are ambiguities that cause defects?” and (2) “What kinds of defects do these ambiguities cause?” Principal idea/Goal: The research reported in this paper tried hard to falsify de Bruijn's and Philippo's result in three different case studies, each with a requirements specification and already developed software. Each study used a purposive sampling of the ambiguities in its requirements specification to find those ambiguities that are least likely to have been discussed and resolved during the inspections and discussions about the specifications in an attempt to find undetected ambiguities that caused or can cause major defects in the implemented software. The purposive sampling was to identify types of ambiguity, called persistent ambiguities of which many people are not aware; which, therefore, will not come up in any of the discussions about the requirements; and which will persist into the implementation to cause defects. After obtaining the persistent ambiguities in the project's requirements specification, we asked the project's chief requirements engineer if any of them caused or can cause serious defects in the project's software. Conclusion/Contribution: For the three projects, none of the sampled ambiguities reviewed by each chief requirements engineer caused expensive damage because all of the project's requirements engineers seem to have subconsciously disambiguated the ambiguities in the same way. The first main conclusion is that persistent ambiguities remain undetected during requirements engineering and the subsequent development. The second main conclusion is that a serious requirements engineering process is sufficient to cause all project stakeholders to disambiguate, consciously or not, all ambiguities, persistent or not, in a requirements specification the same way; thus, ambiguities, while present in the specification, do not cause defects in the downstream software. The third main conclusion is that the identification of persistent ambiguities in a requirements specification is potentially an effective and efficient strategy for minimizing damage caused by ambiguity precisely because of its focus on ambiguities that remain undetected due to lack of awareness. Further study is necessary to determine what factors are involved in persistent ambiguity and its prevalence, as well as its potential impacts.},
author = {Ribeiro, Cristina and Berry, Daniel},
doi = {10.1016/j.scico.2020.102472},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Ambiguity inspection,Case study,Purposive sampling,Random sampling,Requirements engineering discussions},
month = {sep},
pages = {102472},
publisher = {Elsevier B.V.},
title = {{The prevalence and severity of persistent ambiguity in software requirements specifications: Is a special effort needed to find them?}},
volume = {195},
year = {2020}
}
@inproceedings{h18,
abstract = {The accomplishment of any software system success depends on how well it meets the requirements of the stakeholders. These requirements are elicited from the customers. Software requirements are unambiguous if and only if it has one meaning. The elicited requirements are documented in software requirements specification document and these requirements are written in natural languages. Natural languages are basically ambiguous which makes the requirements documented in software requirements specification document unclear. This unclear requirement causes that software developers develop software which is different from the expected software based on the customer needs. The objective of this paper is to propose a framework that are able to detect ambiguity in software requirements specification document automatically using parts of speech tagging technique. To validate the outcome of the proposed work, open source software requirements specification documents will be used and generated result of the proposed work will be evaluated and validated by making comparison between the proposed prototype results and human generated results to decide how the proposed prototype can solved the ambiguity problem.},
author = {ale Sabriye, Ali Olow Jim and Zainon, Wan Mohd Nazmee Wan},
booktitle = {ICIT 2017 - 8th International Conference on Information Technology, Proceedings},
doi = {10.1109/ICITECH.2017.8080002},
isbn = {9781509063321},
keywords = {ambiguity detection,requirements engineering,software requirements specification},
month = {oct},
pages = {209--213},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{A framework for detecting ambiguity in software requirement specification}},
year = {2017}
}
@inproceedings{h9,
abstract = {Understanding interdependency among requirements is one of the success factors in software development. Information on requirements interdependency explicitly and implicitly resided various design artifacts or diagrams. A software requirements specification document is the artifact delivered in the early phase of development. It drives its following development processes. It also contains information on interdependencies among the requirements, such as similar, part-of, and elaborate. This study proposes an approach to model the requirement dependency graph for a software requirements specification document. There is an extraction process for Text Preprocessing, which includes of Tokenization, Stopword Removal, and Stemming. Besides, there is a process of measuring semantic similarity through WS4J (WordNet Similarity for Java). The results of the extraction process, combined with Greedy Algorithms as the optimum value solution approach. Besides, a method for calculating similarity was used through the practices of Wu Palmer and Levenshtein. At the end of this process, Reliability is performed using the Gwet's AC1 formula.},
author = {Priyadi, Yudi and Djunaidy, Arif and Siahaan, Daniel},
booktitle = {2019 1st International Conference on Cybernetics and Intelligent System, ICORIS 2019},
doi = {10.1109/ICORIS.2019.8874920},
isbn = {9781728114729},
keywords = {dependency type,reliability,requirements dependency graph,similarity,software requirements specifications,text preprocessing},
month = {aug},
pages = {221--226},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Requirements Dependency Graph Modeling on Software Requirements Specification Using Text Analysis}},
year = {2019}
}
@inproceedings{h19,
abstract = {Requirements are informal and semi-formal descriptions of the expected behavior of a complex system from the viewpoints of its stakeholders (customers, users, operators, designers, and engineers). However, for the purpose of design, testing, and verification for critical systems, we can transform requirements into formal models that can be analyzed automatically. ARSENAL is a framework and methodology for systematically transforming natural language (NL) requirements into analyzable formal models and logic specifications. These models can be analyzed for consistency and implementability. The ARSENAL methodology is specialized to individual domains, but the approach is general enough to be adapted to new domains.},
archivePrefix = {arXiv},
arxivId = {1403.3142},
author = {Ghosh, Shalini and Elenius, Daniel and Li, Wenchao and Lincoln, Patrick and Shankar, Natarajan and Steiner, Wilfried},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-40648-0_4},
eprint = {1403.3142},
isbn = {9783319406473},
issn = {16113349},
pages = {41--46},
publisher = {Springer Verlag},
title = {{ARSENAL: Automatic requirements specification extraction from natural language}},
volume = {9690},
year = {2016}
}
@inproceedings{h20,
abstract = {Software requirements are usually written in natural language or speech language which is asymmetric and irregular. This paper presents a suitable method for transforming user software requirement specifications (SRS) and business designs written in natural language into useful object oriented models. For sentence detection, tokenization, parts of speech tagging and parsing of requirement specifications we incorporate an open natural language processing (OpenNLP)tool. It provides very relevant parts of speech (POS) tags. This parts of speech tagging of the SRS is quite useful for further identification of object oriented elements like classes, objects, attributes, relationships etc. After obtaining the required and relative information, Semantic Business Vocabulary and Rules (SBVR) are applied to identify and to extract the object oriented elements from the requirement specification.},
author = {Mohanan, Murali and Samuel, Philip},
booktitle = {Advances in Intelligent Systems and Computing},
doi = {10.1007/978-3-319-28031-8_17},
isbn = {9783319280301},
issn = {21945357},
keywords = {Class model generation,OpenNLP,Requirement elicitation,SBVR,Software requirement specification},
pages = {197--208},
publisher = {Springer Verlag},
title = {{Software requirement elicitation using natural language processing}},
volume = {424},
year = {2016}
}
@inproceedings{h21,
abstract = {In this work we extend a popular agent design methodology, Prometheus, and improve the understandability and maintainability of requirements by automatically generating UML activity diagrams from existing requirements models; namely scenarios and goal hierarchies. The approach is general to all the methodologies that support similar notions in specifying requirements.},
author = {Abushark, Yoosef and Thangarajah, John and Miller, Tim and Winikoff, Michael and Harland, James},
booktitle = {Proceedings of the International Joint Conference on Autonomous Agents and Multiagent Systems, AAMAS},
isbn = {9781450342391},
issn = {15582914},
keywords = {AOSE methodology,Goal-oriented requirements},
pages = {1247--1248},
publisher = {International Foundation for Autonomous Agents and Multiagent Systems (IFAAMAS)},
title = {{Requirements specification in the prometheus methodology via activity diagrams}},
year = {2016}
}
@inproceedings{h22,
abstract = {The evolution of the requirements specification is a key activity for maintaining the goals of any software project and it has long been established and recognized by researchers and practitioners. Within Software Product Lines (SPL), this evolution is even more critical due to the necessity of dealing with common, variable, and product-specific requirements, not only for a single product but for the whole set of products. In this paper, we present the Feature-Driven Requirements Engineering Evolution (FeDRE2) approach, which provides support to evolve the requirements specification of SPL. The approach evolves the feature model and the use case specification from an SPL according to the user's needs. It also provides detailed guidelines on how to evolve chunks of features from a feature model and their related use case specifications. The evaluation of the approach is illustrated in an empirical study for evolving an SPL of mobile applications for emergency notifications. This empirical study was applied within 16 participants, 9 participants from Federal University of Bahia (Brazil) and 7 participants from Polytechnic University of Valencia (Spain). Evaluations concerning the perceived ease of use, perceived usefulness, effectiveness, and efficiency as regards requirements analysts using the approach are also presented. The results have shown that FeDRE2 was perceived as easy to learn and useful by the participants.},
author = {Oliveira, Raphael Pereira De and Almeida, Eduardo Santana De},
booktitle = {Proceedings - 2015 9th Brazilian Symposium on Software Components, Architectures and Reuse, SBCARS 2015},
doi = {10.1109/SBCARS.2015.11},
isbn = {9781467396301},
keywords = {Empirical Study,Evolution,Requirements Engineering (RE),Software Product Lines (SPL)},
month = {oct},
pages = {1--10},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Requirements Evolution in Software Product Lines: An Empirical Study}},
year = {2015}
}
@inproceedings{h11,
abstract = {Users need trusting in data managed by software applications that are part of Information Systems (IS), which supposes that organizations should assuring adequate levels of quality in data that are managed in their IS. Therefore, the fact that an IS can manage data with an adequate level of quality should be a basic requirement for all organizations. In order to reach this basic requirement some aspects and elements related with data quality (DQ) should be taken in account from the earliest stages of development of software applications, i.e. 'data quality by design'. Since DQ is considered a multidimensional and largely context-dependent concept, managing all specific requirements is a complex task. The main goal of this paper is to introduce a specific methodology, which is aimed to identifying and eliciting DQ requirements coming from different viewpoints of users. These specific requirements will be used as normal requirements (both functional and non-functional) during the development of IS awareness of data quality.},
author = {Guerra-Garcia, Cesar and Caballero, Ismael and Cardenas-Juarez, Marco and Samano-Robles, Ramiro},
booktitle = {2016 11th International Conference on Digital Information Management, ICDIM 2016},
doi = {10.1109/ICDIM.2016.7829796},
isbn = {9781509026401},
keywords = {data quality,information system development,requirements specification},
pages = {79--84},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Adding quality in the user requirements specification: A first approach}},
year = {2016}
}
@inproceedings{h23,
abstract = {The field of software engineering is seeking ways to close the gaps that exist between the phases of software development, right from requirements specification until testing to deliver reliable software systems. The concepts discussed in this paper intends to reduce that gap using formal methods. This paper introduces new methods and tools that potentially would significantly reduce the time and cost of developing software systems while increasing their reliability. This paper describes a methodology using formal methods to verify software specifications. The use of formal methods during the different phases of a software development life cycle has proven advantages of resulting in a reliable software system. Understanding the importance of using formal methods to specify software systems and then to verify the specifications for correctness forms the first sub problem. Tools and framework needed to formally verify software specifications written for agent systems is also discussed in this paper. This research explores using the model checking methods along with the executable Descartes -Agent specifications to provide a basis for formal verification of agent systems and, generally reliable systems. The Descartes -Agent grammar previously developed was used to implement an algorithm that converts the agent specifications into an intermediate form in linear temporal logic form. Popular model checking tools such as Promela and SPIN were also used to provide a complete framework of verifiable formal specifications.},
author = {Subburaj, Vinitha Hannah and Urban, Joseph E.},
booktitle = {Proceedings - 2nd IEEE International Conference on Robotic Computing, IRC 2018},
doi = {10.1109/IRC.2018.00081},
isbn = {9781538646519},
keywords = {formal methods,model checking,software specifications},
month = {apr},
pages = {392--398},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Descartes-Agent: Verifying Formal Specifications Using the Model Checking Technique}},
volume = {2018-Janua},
year = {2018}
}
@inproceedings{Anuar2016,
abstract = {The quality of Software Requirements Specification (SRS) is crucial in order to ensure successful project completion. SRS of poor quality usually lacks of quality attributes such as completeness, accuracy and disambiguity. Boilerplate is a technique used to deal with problems in SRS. However, study on the coverage of boilerplate contribution especially in improving SRS quality is limited. This paper presents Systematic Literature Review (SLR) on problems in SRS and boilerplates. The review that covers literature from 1997 to 2015 reveals that 1) poor quality SRS is the most popular problem among the other five SRS problems discovered, 2) Boilerplate technique has been applied to cope with SRS of poor quality, where disambiguity has been found the most popular quality attribute.},
author = {Anuar, Umairah and Ahmad, Sabrina and Emran, Nurul A.},
booktitle = {2015 9th Malaysian Software Engineering Conference, MySEC 2015},
doi = {10.1109/MySEC.2015.7475203},
isbn = {9781467382267},
keywords = {SRS quality,boilerplates,software requirements specification},
month = {may},
pages = {99--105},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{A simplified systematic literature review: Improving Software Requirements Specification quality with boilerplates}},
year = {2016}
}
@article{h24,
abstract = {Product requirements serve many purposes in the product development process. Most importantly, they are meant to capture and facilitate product goals and acceptance criteria, as defined by stakeholders. Accurately communicating stakeholder goals and acceptance criteria can be challenging and more often than not, requirements will be subject to simplification, causing ambiguity and uncertainty, with negative consequences for the company and the users. To prevent such incidences, a new approach for creating more complete requirements is proposed in this article. Grounded in robust design theory, the approach uses quality loss functions as one of the five principles, to visualise a more complete set of requirement information in a single figure. In order to validate the potential and applicability of the proposed approach, a new indicator for requirement completeness is introduced, expressing how open the requirements are for interpretation. By applying the method and indicator to a case study from the medical device industry, it was found that less than 45{\%} of the potential for quantification had been utilised. Finally, the robust design requirements specification method was successfully applied to three case study requirements, to illustrate the gains in terms of the level of quantification, transparency, and comprehensiveness of the provided information.},
author = {Pedersen, S{\o}ren Nygaard and Christensen, Martin E. and Howard, Thomas J.},
doi = {10.1080/09544828.2016.1183163},
issn = {14661837},
journal = {Journal of Engineering Design},
keywords = {Risk and reliability,customer satisfaction,quality issues,taguchi methods},
month = {aug},
number = {8},
pages = {544--567},
publisher = {Taylor and Francis Ltd.},
title = {{Robust design requirements specification: a quantitative method for requirements development using quality loss functions}},
volume = {27},
year = {2016}
}
@article{h25,
abstract = {Global software development (GSD), where software teams are located in different parts of the world, has become increasingly popular. To devise a high-quality software requirements specification (SRS), effective communication and collaboration between stakeholders are necessary for GSD. However, geographical distance, cultural diversity, differences in time zones and language barriers create difficulties for stakeholders in engaging in effective collaboration. Taking into consideration the factors involved in GSD, previous research showed that the ways by which requirements are documented and validated for collocated software development projects cannot be used effectively for GSD. In this paper, we present a method of GSD requirements specification and validation. Our method begins with generating a requirements graph to understand details of the software requirements with respect to different GSD sites. The information obtained from a requirements graph is to be contained in a requirements specification document, and then be circulated between different GSD sites for reviewing, updating and finalizing its content. Finally, the requirements contained in the specification document are to be validated by generating and comparing validation matrices at different GSD sites. Past researchers used student groups in a university environment to play the roles of stakeholders in experiments in GSD studies. We therefore validate our method by applying it to a case study of an online shopping system, where the roles of stakeholders were played by a group of students.},
author = {Ali, Naveed and Lai, Richard},
doi = {10.1007/s00766-015-0240-4},
issn = {1432010X},
journal = {Requirements Engineering},
keywords = {Distributed teams,Global software development,Requirements validation,Software requirements specification},
month = {jun},
number = {2},
pages = {191--214},
publisher = {Springer London},
title = {{A method of software requirements specification and validation for global software development}},
volume = {22},
year = {2017}
}
@inproceedings{h26,
abstract = {Recognizing the essential role of eliciting stakeholder needs and expectations when specifying system requirements from an interaction perspective, corresponding research has been triggered in subject-oriented requirements engineering. Thereby, requirements elicitation from a functional and interactional perspective overcomes essential deficiencies in behavior-centered process and application development: the lack of structuring elicitation and modelling, and the lack of prescribed deliverables. In this paper, the rationale of the subject-oriented approach is detailed and its application is exemplified. The cases show how system requirements evolve along multi-dimensional elicitation and specification activities. The approach is effective at delivering semantically coherent, and consistent requirements specifications. A crucial benefit seems to be scaffolding, in particular, when communication between stakeholders and/or interaction between systems is considered in addition to a purely functional or task-centered perspective. Finally, the generated representations can be used throughout development, thus supporting continuous evolvement.},
author = {Stary, Christian},
booktitle = {CEUR Workshop Proceedings},
issn = {16130073},
keywords = {Behavior encapsulation,Communication requirements,Interaction,Messaging,Stakeholder perception,Subject-orientation,Systems engineering},
publisher = {CEUR-WS},
title = {{Requirements elicitation and specification using the S-BPM paradigm}},
volume = {1796},
year = {2017}
}
@inproceedings{h27,
abstract = {Agile software development methodology is an iterative and incremental method in making interactions more important than process and tools. The method also emphasizes more on developing software rather than making a comprehensive documentation. Therefore, web developers like to adapt agile software development methodology in their web development. The reason is because the methodology delivers web application faster than the traditional software development methodology. As advantages of this method, web application is developed in a short time. Although these make huge benefits, the most important thing in software development life cycle has been ignored. That is, documentation process in capturing requirements and design. Therefore, this paper presents a tool named XML-DocTracker for generating the software requirements specification (SRS) from XML schema as well as addressing the versioning problems during generating the SRS. XML-DocTracker is implemented based on the framework for transformation rules from XML Schema. The framework also addresses the versioning factor using traceability for detecting the document changes. Based on the framework, XML-DocTracker is developed and the tool is able to generate the SRS from the XML schema as well as able to detect document changes in SRS due to traceability factor that is embedded inside the tool. The tool can be used for software community who want to generate the SRS from the source codes if the SRS did not exist for that particular software. This paper contribution is detecting new type of element evolution in SRS when new XML schema version is introduced.},
author = {Aman, Hannani and Ibrahim, Rosziati},
booktitle = {ICISS 2016 - 2016 International Conference on Information Science and Security},
doi = {10.1109/ICISSEC.2016.7885872},
isbn = {9781509054930},
keywords = {Reverse Engineering,Software Requirements Specification (SRS),UML Specification,XML Schema},
month = {mar},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{XML-DocTracker: Generating Software Requirements Specification (SRS) from XML Schema}},
year = {2017}
}
@inproceedings{h28,
abstract = {The quality of a Software Requirements Specification (SRS) is measured in terms of quality properties such as completeness, conciseness, consistency and understandability. In general, evaluation of the SRS quality is done manually during review sessions. The evaluation process, however, is hugely dependent on the expertise of human experts i.e. the reviewers. In fact, the judgment of the human experts could also be inconsistent due to various factors including experience, knowledge and domain. The objectives of this study are to (1) identify feasible rules to measure SRS quality; and (2) help requirements engineer to improve their SRS quality. In this study, we analyzed SRS quality properties from the literature and identified quality factors that are feasible to be automated. From here, we identified two types of properties that are (1) requirements sentence quality (RSQ) and (2) requirements document quality (RDQ). For each of the type, its relevant quality indicators were identified. From here, rules on how to identify the quality indicators were further investigated and documented. As a case study, we implemented SRS Quality-Checker tool as a proof-of-concept for demonstrating how the rules were implemented to measure the SRS quality.},
author = {Nordin, Azlin and {Ahmad Zaidi}, Nurul Husna and Mazlan, Noor Asheera},
booktitle = {Journal of Telecommunication, Electronic and Computer Engineering},
issn = {22898131},
keywords = {Requirements Document Quality,Requirements Review,Requirements Sentence Quality.,S—Measuring SRS Quality},
number = {3-5 Special Issue},
pages = {123--128},
publisher = {Universiti Teknikal Malaysia Melaka},
title = {{Measuring software requirements specification quality}},
volume = {9},
year = {2017}
}
@inproceedings{h13,
abstract = {A task at the beginning of the software development process is the creation of a requirements specification. The requirements specification is usually created by a software engineering expert. We try to substitute this expert by a domain expert (the user) and formulate the problem of creating requirements specifications as a search-based software engineering problem. The domain expert provides only examples of event sequences that describe the behavior of the required software program. These examples are represented by simple sequence diagrams and are divided into two subsets: positive examples of required program behavior and negative examples of prohibited program behavior. The task is then to synthesize a generalized requirements specification that usefully describes the required software. We approach this problem by applying a genetic algorithm and evolve deterministic finite automata (DFAs). These DFAs take the sequence diagrams as input that should be either accepted (positive example) or rejected (negative example). The problem is neither to find the minimal nor the most general automaton. Instead, the user should be provided with several appropriate automata from which the user can select, or which help the user to refine the examples given initially. We present the context of our research ('On-The-Fly Computing'), present our approach, report results indicating its feasibility, and conclude with a discussion.},
author = {{Van Rooijen}, Lorijn and Hamann, Heiko},
booktitle = {Proceedings - 2016 IEEE 24th International Requirements Engineering Conference Workshops, REW 2016},
doi = {10.1109/REW.2016.23},
isbn = {9781509036943},
month = {jan},
pages = {3--9},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Requirements specification-by-example using a multi-objective evolutionary algorithm}},
year = {2017}
}
@inproceedings{h29,
abstract = {Agile approaches are known by making the use of informal elicitation techniques for requirements specification. The exclusive use of these techniques may cause some issues, such as ambiguous specifications and information lack. In this work we investigate better approaches to specify requirements in agile projects. Thus, we conducted an empirical evaluation about applicability of a formal method as specification technique, using mathematical logic as a possibility to solve limitations of informal specification. Initially, we conducted a survey to obtain the agile team practitioners opinion. Furthermore, we conducted two separated case studies in two agile teams to evaluate the applicability of Z notation in the requirements specification. Our initial results pointed out that formal specification assists on making complex requirements clearer and decreasing the time to understand their meanings.},
author = {Rodrigues, Peterson and {Da Silva}, Jo{\~{a}}o Pablo S. and Ecar, Miguel and Guedes, Gilleanes T.A. and Menezes, Stefane V. and Rodrigues, Elder M.},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/3229345.3229401},
isbn = {9781450365598},
keywords = {Agile approach,Case Study,Empirical Studies,Formal Method,Formal Specification,Survey},
month = {jun},
pages = {416--423},
publisher = {Association for Computing Machinery},
title = {{Empirical evaluation of formal method for requirements specification in agile approaches}},
year = {2018}
}
@inproceedings{h30,
abstract = {In this paper, the authors explain a formal method adopted to model the system requirements specification of the ERTMS/ETCS trackside-subsystem (Radio Block Center) implemented on the high speed/high capacity Italian railways. The logical behaviour is represented by Statechart diagrams using the Statemate™ Magnum Tool. The model pointed out permits to describe the specification in scalable way, giving both a high level of abstraction and a more detailed level of description. The proposed methodology has been applied to represent the Bologna-Firenze and Milano-Bologna ETCS lines. The process has concerned the following steps: I) analysis of all the documents (UNISIG, RFI SRS), II) chose of the Formal Language Model (Statecharts), III) rules definition for Statechart Models (state conditions, state transitions), IV) develompment of the Statechart Model for the ETCS Trackside Subsystem, V) testing of the Model by Specific Tools: i) Statemate Magnum Certifier for logical tests implemented by the user, ii) Automatic evaluation of the model through Real Datalog files.},
author = {Piccolo, Antonio and Galdi, Vincenzo and Senesi, Fabio and Malangone, Raffaele},
booktitle = {Electrical Systems for Aircraft, Railway and Ship Propulsion, ESARS},
doi = {10.1109/ESARS.2015.7101503},
isbn = {9781479974009},
issn = {21659427},
keywords = {ERTM/ETCS,Statechart diagrams,high speed/high capacity railways,system requirements specification},
month = {may},
publisher = {IEEE Computer Society},
title = {{Use of formal languages to represent the ERTMS/ETCS system requirements specifications}},
volume = {2015-May},
year = {2015}
}
@inproceedings{h31,
abstract = {In the recent past, domain specific solutions for detailed semantic analysis have got acceptable by natural language processing community and use of applications involving natural language based user interface. Different approaches that has been previously used is focusing on quality of text and improving the text contents by adding semantic information with text then the existing approaches used for semantic analysis can provide better results. In this, an approach was presented to address the problem of non- availability of semantic information required for better semantic analysis. This problem is solved by using semantic technology to annotate text of software requirements expressed in a natural language with their domain specific semantics and investigate the effect of semantic analysis with attached semantics. The presented approach uses a semantic framework specifically designed for interpretation and detailed semantic analysis of natural language software requirement specifications. The used framework is based on semantic technology involves knowledge extracted from existing software requirement documents and knowledge extracted from existing applications. The presented approach shows that by adapting and combing existing ontologies to support knowledge management, developing system and performing experiments on requirement of real world software systems. In this approach start with software requirement specification, after this clean the irrelevant requirements, convert the cleaned requirements into graph that represents inter related different elements. Represent the requirement graph into sparse matrix, after these all steps; we generate ontology with the help of OntoGen tool.},
author = {Hassan, Taimoor and Hassan, Shoaib},
booktitle = {2016 6th International Conference on IT Convergence and Security, ICITCS 2016},
doi = {10.1109/ICITCS.2016.7740324},
isbn = {9781509037643},
keywords = {Natural Language Processing,Ontology,Semantic Technology,Software Requirement Specification},
month = {nov},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Design semantic framework for software requirement specification}},
year = {2016}
}
@article{h32,
abstract = {Software requirements are considered to be ambiguous if the requirements statement could have more than one interpretation. The ambiguous requirements could cause the software developers to develop software which is different from what the customer needs. The focus of this paper is to propose an approach to detect syntax and syntactic ambiguity in software requirements specification. In this paper, Parts of speech (POS) tagging technique has been used to detect these ambiguities. A prototype tool has been developed in order to evaluate the proposed approach. The evaluation is done by comparing the detection capabilities of the proposed tool against human capabilities. The overall results show that the humans do have some difficulties in detecting ambiguity in software requirements, especially the syntactic ambiguity and software requirements that contains both syntax and syntactic ambiguity in one sentence. The proposed tool can definitely help the analyst in detecting ambiguity in Software requirements.},
author = {Sabriye, Ali Olow Jim'Ale and {Wan Zainon}, Wan Mohd Nazmee},
issn = {18173195},
journal = {Journal of Theoretical and Applied Information Technology},
keywords = {Part of speech tagging,Software requirements specification,Syntactic ambiguity,Syntax ambiguity},
month = {apr},
number = {8},
pages = {2275--2284},
publisher = {Little Lion Scientific},
title = {{An approach for detecting syntax and syntactic ambiguity in software requirement specification}},
volume = {96},
year = {2018}
}
@article{h33,
abstract = {The quality of a Software Requirements Specification (SRS) is measured in terms of quality properties such as completeness, conciseness, consistency and understandability. In general, evaluation of the SRS quality is done manually during review sessions. The evaluation process, however, is hugely dependent on the expertise of human experts i.e. the reviewers. In fact, the judgment of the human experts could also be inconsistent due to various factors including experience, knowledge and domain. The objectives of this study are to (1) identify feasible rules to measure SRS quality; and (2) help requirements engineer to improve their SRS quality. In this study, we analyzed SRS quality properties from the literature and identified quality factors that are feasible to be automated. From here, we identified two types of properties that are (1) requirements sentence quality (RSQ) and (2) requirements document quality (RDQ). For each of the type, its relevant quality indicators were identified. From here, rules on how to identify the quality indicators were further investigated and documented. As a case study, we implemented SRS Quality-Checker tool concept for demonstrating how the rules were implemented to measure the SRS quality.},
author = {Arun, C. and Karthick, S. and {Sivan Muthu Krishnan}, G. and Dutta, Soumitro},
doi = {10.35940/ijrte.B1051.0782S419},
issn = {22773878},
journal = {International Journal of Recent Technology and Engineering},
keywords = {Measuring SRS Quality,Requirements document quality,Requirements review,Requirements sentence quality,Software requirements specification},
month = {jul},
number = {2 Special Issue 4},
pages = {274--279},
publisher = {Blue Eyes Intelligence Engineering and Sciences Publication},
title = {{A tool for analyzing software requirements document quality}},
volume = {8},
year = {2019}
}
@article{h34,
abstract = {This research deals with software requirements ambiguity problems. Among these are incomplete, incorrect, improper, inaccurate and unambiguous requirements. Interestingly, published material related to Software Requirements Specifications (SRS) problems discusses ambiguity as one of the most conversed problems. This paper proposes a Software Requirement Ambiguity Avoidance Framework (SRAAF) to assist and support requirement engineers to write unambiguous requirements, by selecting correct elicitation technique based on the evaluation of various attributes and by applying the W6H technique. We explored existing theories and the outcomes of experimental research to construct the framework. On the basis of existing and inferred knowledge, we tried to justify proposed frameworks components. Our selection process focuses on various situational attributes. We added various situational attributes related to project, stakeholders and requirement engineer for the selection process. Newly devised approach chooses techniques other than traditional techniques or most common techniques and deals with ambiguity to capture the correct requirements information from stakeholders. The framework will be able to address the selection and ambiguity issues in a more effective way and can handle vagueness. New evidence related to attributes and adequacy matrix can be easily added to the framework without any inconvenience.},
author = {Gupta, Ashok Kumar and Deraman, Aziz},
doi = {10.11591/ijece.v9i6.pp5436-5445},
issn = {20888708},
journal = {International Journal of Electrical and Computer Engineering},
keywords = {Ambiguity,Elicitation technique selection,Requirement elicitation,Unambiguous requirements},
number = {6},
pages = {5436--5445},
publisher = {Institute of Advanced Engineering and Science},
title = {{A framework for software requirement ambiguity avoidance}},
volume = {9},
year = {2019}
}
@inproceedings{h44,
abstract = {The failure and success of any software mainly depends on a technical document known as Software Requirement Specification (SRS) document, as it contains all requirements and features of the product. In the past, many developments had been done to improve the quality of the SRS, with respect to different attributes of the product, but the product success rate is not satisfactory and the room for improvement is still there. We have developed a different approach to resolve those issues. Our methodology consist of four processes i.e. Parsing Requirement (PR), Requirement Mapping using Matrix (RMM), Addition of Requirements in SRS template and Third Party Inspection. Requirement Engineering Process will provide the required inputs to PR after the implementation of its ontology rules completion of requirements will be achieved. RMM will be generated to minimize ambiguities and incorrectness with concerns of all stakeholders. Outputs of the previous processes will be added to IEEE standard format. A third party inspection will be conducted to check the requirements of the client and SRS. After inspecting SRS using inspection models and assigning Total Quality Score (TQS) third party will submit a detailed report to team of Requirement Engineers (RE). This practice will not only identify the problem but will solve the issue on its way.},
author = {Ali, Syed Waqas and Ahmed, Qazi Arbab and Shafi, Imran},
booktitle = {2018 International Conference on Engineering and Emerging Technologies, ICEET 2018},
doi = {10.1109/ICEET1.2018.8338619},
isbn = {9781538621707},
keywords = {Parsing Requirement,Requirement Engineering,Requirement Mapping Matrix,Software Requirement Specification,Total Quality Score},
month = {apr},
pages = {1--6},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Process to enhance the quality of software requirement specification document}},
volume = {2018-Janua},
year = {2018}
}
@article{h35,
abstract = {In this work, we present DUSM (Disciplined Use Cases with Screen Mockups), a novel method for describing and refining requirements specifications based on disciplined use cases and screen mockups. Disciplined use cases are characterized by a quite stringent template to prevent common mistakes, and to increase the quality of the specifications. Use cases descriptions are formulated in a structured natural language, which allows to reach a good level of precision, avoiding the need for further notations and complex models. Screen mockups are precisely associated with the steps of the use cases scenarios and they present the corresponding GUIs (graphical user interfaces) as seen by the human actors before/after the steps executions, improving the comprehension and the expression of the non-functional requirements on the user interface. DUSM has been proposed and fine-tuned during several editions of a software engineering course at the University of Genova. Then, by means of a series of case studies and experiments, we validated the method and evaluated: 1) its effectiveness in improving the comprehension and, in general, the quality of the produced requirements specification, and 2) its applicability in the industry, where the method has been found useful and not particularly onerous.},
author = {Reggio, Gianna and Leotta, Maurizio and Ricca, Filippo and Clerissi, Diego},
doi = {10.1007/s11390-018-1866-8},
issn = {18604749},
journal = {Journal of Computer Science and Technology},
keywords = {empirical validation,graphical user interface (GUI),requirements specification,screen mockup,use case,user interface requirements},
month = {sep},
number = {5},
pages = {918--939},
publisher = {Springer New York LLC},
title = {{DUSM: A Method for Requirements Specification and Refinement Based on Disciplined Use Cases and Screen Mockups}},
volume = {33},
year = {2018}
}
@inproceedings{h36,
abstract = {As our world grows in complexity, companies and employees alike need, more than ever before, solutions tailored to their needs. Such tools do not always exist and need to be designed from scratch. In this paper, we present a syntactic rule-based extraction tool for software requirements specification documents. Notably, our tool allows non-expert users to express their software needs in unfiltered natural language.},
author = {Caron, Matthew and B{\"{a}}umer, Frederik S. and Geierhos, Michaela},
booktitle = {CEUR Workshop Proceedings},
issn = {16130073},
publisher = {CEUR-WS},
title = {{Back to basics: Extracting software requirements with a syntactic approach}},
volume = {2075},
year = {2018}
}
@inproceedings{h37,
abstract = {The paper presents the research of information flows at the early stages of the software development lifecycle on the subject their impact on the expected level of software quality. The result of the research is the identification of the problem of evaluating the sufficiency of information on quality in the software requirements specifications (SRS), and the development of information technology that addresses this problem. Information technology is based on the use of standards ISO 25010, ISO 25023 for the development of settheoretical and ontological models of software quality. During the use of this information technology, the developers receive: the assessment of the sufficiency of information on quality in the SRS; request about the complement of the SRS with the necessary information with the purpose to increase the sufficiency of the volume of information on quality. The use of ontologies provides the automation of the processes of forming the requests for the complement of requirements, which reduces the subjective influence of professionals and preserves their experience and knowledge in the software company.},
author = {Hovorushchenko, Tetiana and Pomorova, Oksana},
booktitle = {CEUR Workshop Proceedings},
issn = {16130073},
keywords = {Information technology,Ontology,Software,Software requirements specification (SRS),Sufficiency of information on quality},
pages = {555--570},
publisher = {CEUR-WS},
title = {{Information technology of evaluating the sufficiency of information on quality in the software requirements specifications}},
volume = {2104},
year = {2018}
}
@inproceedings{h38,
abstract = {Informal specifications are commonly adopted for requirements engineering (RE), especially for customer-oriented system development projects, but their validity with respect to the user's requirements is usually difficult to perform. The common reason for the difficulty is that the specifications are often misinterpreted by the stakeholders due to the ambiguity of the natural language. This paper describes a procedure in transforming the informal specification into specification visual specification. The transformation procedure is developed based on the extended version of software visualization taxonomy. The underlying software visualization specification principle is called Requirement Engineering (specification) for Human Factor validation (REsHFv). The framework is devoted to human factor involvement in validating the informal specification using software visualization as interaction medium.},
author = {{Binti Zainuddin}, Fauziah and {Bin Abdullah Arshah}, Ruzaini and {Binti Mohamad}, Rozlina},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/3185089.3185128},
isbn = {9781450354141},
keywords = {Human factor,Informal specification,Requirement engineering,Software visualization taxonomy,Visualization},
month = {feb},
pages = {66--71},
publisher = {Association for Computing Machinery},
title = {{Software visual specification for requirement specification validation}},
year = {2018}
}
@article{h39,
abstract = {The process of producing software requirements specification (SRS) is known to be challenging due to the amount of effort, skills and experience needed in writing good quality SRS. A tool-based boilerplate technique is introduced to provide assistance in identifying essential requirements for a generic information management system and translating them into standard requirements statements in the SRS. This paper presents an empirical investigation to evaluate the usability of the prototype. Results showed that the tool-based boilerplate technique has high usability, usefulness and ease of use.},
author = {Anuar, Umairah and Ahmad, Sabrina and Emran, Nurul Akmar},
doi = {10.14569/IJACSA.2018.091256},
issn = {21565570},
journal = {International Journal of Advanced Computer Science and Applications},
keywords = {Empirical investigation,Software requirements,Usability},
number = {12},
pages = {397--401},
publisher = {Science and Information Organization},
title = {{An empirical investigation on a tool-based boilerplate technique to improve software requirement specification quality}},
volume = {9},
year = {2018}
}
@inproceedings{h40,
abstract = {Implicit requirements (IMRs) in software requirements specifications (SRS) are subtle and need to be identified as users may not provide all information upfront. It is found that successful functioning of a software crucially depends on addressing its IMRs. This work presents a novel system called PROMIRAR with an integrated framework of Natural Language Processing, Ontology and Analogy based Reasoning for managing Implicit Requirements. It automates early identification and management of IMRs and is found helpful in targeted application domain. We present the PROMIRAR system with its architecture, demo and evaluation.},
author = {Emebo, Onyeka and Olawande, Daramola and Charles, Ayo},
booktitle = {Lecture Notes in Engineering and Computer Science},
isbn = {9789881404817},
issn = {20780958},
keywords = {Analogy-based reasoning,Implicit requirement,Natural language processing,Ontology,Requirement engineering},
pages = {108--112},
publisher = {Newswood Limited},
title = {{Promirar: Tool for identifying and managing implicit Requirements in SRS documents}},
volume = {2237},
year = {2018}
}
@article{h41,
abstract = {This paper presents an evaluation of a boilerplate technique with the assistance of a tool-based prototype in order to improve Software Requirements Specification (SRS) quality in terms of comprehensibility, correctness and consistency. The value behind this boilerplate is to ease the process of identifying essential requirements for a generic information management system and translating them into standard requirements statements in the SRS. An empirical investigation environment is adapted and expert judgment method is used for evaluation. Results showed that the tool-based boilerplate technique improves the completeness, correctness and consistency of requirements in SRS.},
author = {Ahmad, S. and Anuar, U. and Emran, N. A.},
issn = {22898131},
journal = {Journal of Telecommunication, Electronic and Computer Engineering},
keywords = {Empirical Investigation,Expert Judgment,SRS Quality,Software Requirements},
number = {2-7},
pages = {111--114},
publisher = {Universiti Teknikal Malaysia Melaka},
title = {{A tool-based boilerplate technique to improve SRS quality: An evaluation}},
volume = {10},
year = {2018}
}
@inproceedings{h42,
abstract = {In this contribution, we investigate the ambiguity problem in textual requirements specifications. We focused on the structural ambiguity and extracted some patterns to indicate this kind of ambiguity. We show that the standard methods of linguistics are not enough in some cases, and we describe a class of ambiguity caused by coreference that needs an underlying domain model or a knowledge base to be solved. Part of our implemented solution is a cooperation of our tool TEMOS with the Prolog inference machine working with facts and rules acquired from OCL conditions of the domain model.},
author = {{\v{S}}enk{\'{y}}ř, David and Kroha, Petr},
booktitle = {Advances in Intelligent Systems and Computing},
doi = {10.1007/978-3-030-16181-1_83},
isbn = {9783030161804},
issn = {21945365},
keywords = {Ambiguity,Coreference,Domain model,OCL rules,Prolog inference machine,Requirements specification,Text processing},
pages = {886--895},
publisher = {Springer Verlag},
title = {{Patterns of Ambiguity in Textual Requirements Specification}},
volume = {930},
year = {2019}
}
@inproceedings{h43,
abstract = {In this paper, we investigate methods of grammatical inspection to identify patterns in textual requirements specification. Unfortunately, a text in natural language includes additionally many inaccuracies caused by ambiguity, inconsistency, and incompleteness. Our contribution is that using our patterns, we are able to extract the information from the text that is necessary to fix some of the problems mentioned above. We present our implemented tool TEMOS that is able to detect some inaccuracies in a text and to generate fragments of the UML class model from textual requirements specification. We use external on-line resources to complete the textual information of requirements.},
author = {{\v{S}}enk{\'{y}}ř, David and Kroha, Petr},
booktitle = {ICSOFT 2018 - Proceedings of the 13th International Conference on Software Technologies},
doi = {10.5220/0006827302310238},
isbn = {9789897583209},
keywords = {Ambiguity,Glossary,Grammatical Inspection,Incompleteness,Inconsistency,Text Mining,Textual Requirements Specifications},
pages = {197--204},
publisher = {SciTePress},
title = {{Patterns in textual requirements specification}},
year = {2018}
}
@inproceedings{h6,
abstract = {The quality of Software Requirements Specifications (SRS) is important to gain a competitive advantage in the software industry. Although the use of agile methods has grown in recent years, empirical studies conducted in industry identified several problems related to SRS in the context of agile projects. The goal of this study is to investigate the phenomenon of the quality of SRS in Agile Software Development (ASD) and build an explanatory model about it. We use a mixed method research strategy for creating a rich description of the factors that affect the quality of SRS in ASD. First, we conducted a systematic mapping study, then we performed a cross-case analysis of two software organizations: One small private organization and a large public organization. We built an initial model from this analysis. The findings were that SRS in agile projects should be directed to the development team, so it should be close to what will be implemented. The fragmentation of the description of the requirements in various artifacts and excessive detail were considered factors that compromise the quality of the SRS.},
author = {Medeiros, Juliana and Goulao, Miguel and Vasconcelos, Alexandre and Silva, Carla},
booktitle = {Proceedings - 2016 10th International Conference on the Quality of Information and Communications Technology, QUATIC 2016},
doi = {10.1109/QUATIC.2016.058},
isbn = {9781509035816},
keywords = {Agile Methods,Empirical Study,Quality Factor,Requirements Specification},
month = {jan},
pages = {236--241},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Towards a model about quality of software requirements specification in agile projects}},
year = {2017}
}
